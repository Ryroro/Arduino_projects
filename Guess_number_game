//a game for guessing numbers, the notes will be updated later
#include "LedControl.h"

#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978


#define pinSwitch 3
#define pinSwitch2 2
#define pinSwitch3 4
#define pinDIN    5
#define pinCLK    6
#define pinCS     7
#define pinSound  8
#define pinLightR 9
#define pinLightB 10
#define pinLightG 11
#define speakerPin 8

unsigned int count = 0;
unsigned int numberGuess;
unsigned int range1 = 0;
unsigned int range2 = 0;
unsigned int rangeMax;
unsigned int rangeMin;
bool result;
LedControl lc=LedControl(5,6,7,1);

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(pinSwitch,INPUT);
  pinMode(pinSwitch2, INPUT);
  pinMode(pinSwitch3,INPUT);
  pinMode(pinLightR, OUTPUT);
  pinMode(pinLightG, OUTPUT);
  pinMode(pinLightB, OUTPUT);

  lc.shutdown(0,false);
  lc.setIntensity(0,8);
  lc.clearDisplay(0);
  randomSeed(analogRead(0));
  
  range1 = random(100);
  range2 = random(100);

  if (range1 < range2)
  {
    rangeMax = range2;
    rangeMin = range1;
    numberGuess= random(rangeMin,rangeMax);
  }
  else if (range1 > range2)
  {
    rangeMax = range1;
    rangeMin = range2;
    numberGuess = random(rangeMin, rangeMax);
  }
}

void loop() {
  // put your main code here, to run repeatedly
  showDigit(rangeMin, 6);
  showDigit(rangeMax,4);
  count_switch();

  
}

//switch count funtion
void count_switch()
{
    if ((!digitalRead(pinSwitch))&&digitalRead(pinSwitch3))
  {
    delay(100);
    count++;
    showDigit(count,0);
    
    delay(100);
  }
  else if (digitalRead(pinSwitch)&&digitalRead(pinSwitch2))
  {
      if (!digitalRead(pinSwitch3))
      {
        delay(100);
        count=count-1;
        Serial.println(count);
        showDigit(count,0);
        delay(100);
      }
  }
  
  else if (digitalRead(pinSwitch)&&digitalRead(pinSwitch3))
  {
    while(digitalRead(pinSwitch))
    {
        delay(100);
        checkAnswer(count);
    }
  }
    
}

void showDigit(int i,int digit)
{
  
  if (i<=9 && i >=0)
  {
    lc.clearDisplay(0);
    lc.setDigit(0,digit,i,false);
  }
  else if (i>=10 && i <=99)
  {
    lc.setDigit(0,digit,(i%10), false);
    lc.setDigit(0,digit+1,(i-(i%10))/10,false);
  }
  
}

//determine whether the answer is correct or not
void checkAnswer(int i)
{
  if (!digitalRead(pinSwitch2))
  {
    if (numberGuess == count)
    {
      result = true;
      Serial.println("right answer");
      digitalWrite(pinLightG,LOW);
      digitalWrite(pinLightB,HIGH);
      digitalWrite(pinLightR,LOW);
      GameOfThrones();
      delay(500);
      digitalWrite(pinLightB,LOW);
    }
    else if (numberGuess != count)
    {
      result = false;
      tone(pinSound,500,500);
      digitalWrite(pinLightG,HIGH);
      digitalWrite(pinLightB,LOW);
      digitalWrite(pinLightR,LOW);
      delay(500);
      digitalWrite(pinLightG,LOW);
      Serial.println("wrong answer");
      Serial.print("ps:correct answer is ");
      Serial.println(numberGuess);
    }
  }
  else if (digitalRead(pinSwitch2))
  {
    ;
  }
}


void GameOfThrones() {
  for(int i=0; i<4; i++) {
    tone(speakerPin, NOTE_G4);
    delay(500);
    noTone(speakerPin);


    tone(speakerPin, NOTE_C4);
    delay(500);
    noTone(speakerPin);


    tone(speakerPin, NOTE_DS4);

    delay(250);
    noTone(speakerPin);


    tone(speakerPin, NOTE_F4);

    delay(250);
    noTone(speakerPin);

  }

  for(int i=0; i<4; i++){
    tone(speakerPin, NOTE_G4);

    delay(500);
    noTone(speakerPin);


    tone(speakerPin, NOTE_C4);

    delay(500);
    noTone(speakerPin);


    tone(speakerPin, NOTE_E4);

    delay(250);
    noTone(speakerPin);


    tone(speakerPin, NOTE_F4);
    
    delay(250);
    noTone(speakerPin);
 
  }

    tone(speakerPin, NOTE_G4);
   
    delay(500);
    noTone(speakerPin);
 

    tone(speakerPin, NOTE_C4);
 
    delay(500);


    tone(speakerPin, NOTE_DS4);
   
    delay(250);
    noTone(speakerPin);
  

    tone(speakerPin, NOTE_F4);
 
    delay(250);
    noTone(speakerPin);


    tone(speakerPin, NOTE_D4);

    delay(500);
    noTone(speakerPin);


  for(int i=0; i<3; i++) {
    tone(speakerPin, NOTE_G3);

    delay(500);
    noTone(speakerPin);


    tone(speakerPin, NOTE_AS3);

    delay(250);
    noTone(speakerPin);


    tone(speakerPin, NOTE_C4);

    delay(250);
    noTone(speakerPin);
  

    tone(speakerPin, NOTE_D4);

    delay(500);
    noTone(speakerPin);
   
  }//

      tone(speakerPin, NOTE_G3);
  
      delay(500);
      noTone(speakerPin);
 

      tone(speakerPin, NOTE_AS3);
    
      delay(250);
      noTone(speakerPin);


      tone(speakerPin, NOTE_C4);
    
      delay(250);
      noTone(speakerPin);
  

      tone(speakerPin, NOTE_D4);
     
      delay(1000);
      noTone(speakerPin);
      
      
      tone(speakerPin, NOTE_F4);
     
      delay(1000);
      noTone(speakerPin);
     

      tone(speakerPin, NOTE_AS3);
     
      delay(1000);
      noTone(speakerPin);
     

      tone(speakerPin, NOTE_DS4);
    
      delay(250);
      noTone(speakerPin);


      tone(speakerPin, NOTE_D4);

      delay(250);
      noTone(speakerPin);
    
      tone(speakerPin, NOTE_F4);
    
      delay(1000);
      noTone(speakerPin);
      

      tone(speakerPin, NOTE_AS3);
    
      delay(1000);
      noTone(speakerPin);
   
      tone(speakerPin, NOTE_DS4);
      
      delay(250);
      noTone(speakerPin);
      

      tone(speakerPin, NOTE_D4);
     
      delay(250);
      noTone(speakerPin);
    

      tone(speakerPin, NOTE_C4);
     
      delay(500);
      noTone(speakerPin);
     

  for(int i=0; i<3; i++) {
      tone(speakerPin, NOTE_GS3);
      
      delay(250);
      noTone(speakerPin);
    

      tone(speakerPin, NOTE_AS3);
     
      delay(250);
      noTone(speakerPin);
     

      tone(speakerPin, NOTE_C4);
      
      delay(500);
      noTone(speakerPin);
  

      tone(speakerPin, NOTE_F3);
   
      delay(500);
      noTone(speakerPin);
    
  }

    tone(speakerPin, NOTE_G4);

    delay(1000);
    noTone(speakerPin);


    tone(speakerPin, NOTE_C4);
  
    delay(1000);
    noTone(speakerPin);
   

    tone(speakerPin, NOTE_DS4);

    delay(250);
    noTone(speakerPin);


    tone(speakerPin, NOTE_F4);
   
    delay(250);
    noTone(speakerPin);


    tone(speakerPin, NOTE_G4);

    delay(1000);
    noTone(speakerPin);


    tone(speakerPin, NOTE_C4);

    delay(1000);
    noTone(speakerPin);


    tone(speakerPin, NOTE_DS4);
 
    delay(250);
    noTone(speakerPin);
 

    tone(speakerPin, NOTE_F4);
 
    delay(250);
    noTone(speakerPin);
  

    tone(speakerPin, NOTE_D4);
 
    delay(500);
    noTone(speakerPin);


  for(int i=0; i<4; i++) {
    tone(speakerPin, NOTE_G3);

    delay(500);
    noTone(speakerPin);
 

    tone(speakerPin, NOTE_AS3);
 
    delay(250);
    noTone(speakerPin);


    tone(speakerPin, NOTE_C4);

    delay(250);
    noTone(speakerPin);


    tone(speakerPin, NOTE_D4);

    delay(500);
    noTone(speakerPin);

  }
}
